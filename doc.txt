Technical Report: YouTube Transcript Summarizer
Project Overview
A web application that extracts, summarizes, and enables interactive chat with YouTube video transcripts using AI technologies.
Architecture
Frontend (React + Vite)
Framework: React 18.3.1
Build Tool: Vite 6.0.1
Styling: Tailwind CSS
State Management: React Hooks
HTTP Client: Axios
Backend (FastAPI)
Framework: FastAPI
AI Integration: Azure OpenAI
Video Processing: youtube-transcript-api
Translation: Google Translate API
Core Features
Transcript Extraction
Automatic transcript fetching from YouTube videos
Support for multiple languages
Error handling for unavailable transcripts
AI-Powered Summarization
Integration with Azure OpenAI for intelligent summarization
Configurable summary length
Context-aware summary generation
Multi-language Support
Real-time translation for summaries
Support for 20+ languages including:
Indian languages (Hindi, Marathi, Tamil, etc.)
International languages (Spanish, French, German, etc.)
Interactive AI Chat
Context-aware conversations about video content
Real-time AI responses
Chat history maintenance
Typing indicators and loading states
User Interface
Clean, modern design with Tailwind CSS
Responsive layout
Tab-based navigation (Summary/Transcript/AI Chat)
Loading states and error handling
Video thumbnail and title display
Technical Implementation Details
Frontend Components
YouTubeInput
URL validation
Loading state management
Error handling
ResultsView
Tab-based navigation
Grid layout for content organization
Language selection integration
ChatView
Real-time message updates
Auto-scrolling
Message history management
Loading indicators
LanguageSelect
Dropdown for language selection
20+ language options
Custom styling


Backend Services
Transcript Service
   - YouTube video ID extraction
   - Transcript fetching
   - Error handling for unavailable transcripts

Summary Service
  - Azure OpenAI integration
   - Context-aware summarization
   - Error handling and retries

Chat Service
  - Azure OpenAI integration
   - Context-aware conversations
   - Real-time AI responses
   - Chat history maintenance
   - Typing indicators and loading states

Chat Service
     - Azure OpenAI chat completion
   - Context management
   - Response formatting

API Endpoints
Process Video
POST /api/process
   - Input: YouTube URL
   - Output: Title, thumbnail, transcript, summary

Chat
   POST /api/chat
   - Input: User message, transcript context
   - Output: AI response

Health Check
  GET /api/health
   - Output: API status

Performance Optimizations
Frontend
Lazy loading of components
Efficient state management
Debounced API calls
Optimized re-renders
Backend
Async request handling
Caching mechanisms
Error boundary implementation
Rate limiting
Security Features
CORS configuration
Input validation
Error handling
API key protection
Request validation

Environment Requirements
Frontend
{
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "axios": "^1.3.4",
    "tailwindcss": "^3.4.15"
  }
}
Backend
requirements = [
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "openai>=1.0.0",
    "python-dotenv>=0.19.0",
    "youtube-transcript-api>=0.5.0"
]
Future Enhancements
User authentication
Save/bookmark summaries
Export functionality
Advanced AI chat features
Custom summarization options
Batch processing
Analytics integration

Known Limitations
1.YouTube API rate limits
2. Translation character limits
3.Processing time for long videos
4.Azure OpenAI token limits

Deployment Requirements
Node.js environment for frontend
Python 3.8+ for backend
Azure OpenAI API access
Environment variables configuration
CORS configuration
This project demonstrates the integration of modern web technologies with AI capabilities to create a practical tool for video content analysis and interaction.


for backend run commands :
uvicorn app.main:app --reload

for frontend run commands :
npm run dev

